JS 
 1. Создать функцию startDrag. Срабатывающая при событии dragstart. Тело функции добавляет класс selected для элемента который выбрали. Также нужно задать dataTransfer, который хранит содержимое HTML выбранного элемента с типом html. 5 минут 
 2. Создать функцию endDrag. Срабатывающая при событии dragend. Тело функции убирает класс у элемента, у которого есть класс selected (его нужно найти querySelector ). 3 минуты
 3. Создать функцию enterDrag. Срабатывающая при событии enterdrag. Тело функции должно добавить класс drop элементу на который мы наводимся. 
Добавление класса не должно срабатывать на элемент который мы держим
Элемент который получает класс должен быть div. Если элемент не является div, тогда он ищет ближайшего родителя по селектору div, с помощью метода closest(‘selector’). 7 минут
 4. Создать функцию leaveDrag. Срабатывающая при событии dragleave. Данная функция удаляет класс drop, когда наш курсор срабатывает на внешний div с классом tasks. Когда мы выходим с нашего блока с задачей, вы должны проверить на какой элемент сейчас наводится курсор с помощью метода elementFromPoint у объекта document, либо свойством мыши на какой элемент перешёл курсор, свойство relatedTarget. 7 минут
 5. Создать функцию overDrag. Срабатывающая при событии dragover. Задача которой, отменить действие браузера по умолчанию, чтобы могло сработать событие drop на нашем div. 3 минуты 
 6. Создать функцию dropDrag. Срабатывающая при событии drop. Тело функции, должно принять отправленные данные с startDrag. Сначала мы меняем содержимое выбранного элемента и дальше так как мы отправили содержимое HTML через dataTransfer, нам нужно сменить его для элемента на который мы на наводимся. 5 минут

let listDiv = querySelectorAll('selector') - список блоков по селектору 

for ( div of listDiv ) {
	div.addEventListener('dragstart',startDrag)
}

draggable = 'true' - атрибут для элементов, которые будем перемещать.